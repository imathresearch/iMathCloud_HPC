# (C) 2013 iMath Research S.L. - All rights reserved.

""" The module that implements an abstract Job, which must be instantiated as 
PythonJob, RJob, etc...

Authors:

@author iMath
"""

import abc
from urlparse import urlparse
import os

class JobInfo(object):
    
    def __init__(self, idJob=None, url=None, port=None, sourceFile=None, path=None, parameter=None, user=None):
        self.idJob = idJob
        self.url = url
        self.port = port
        self.sourceFile = sourceFile
        self.path = path
        self.parameter = parameter
        #The username that it is in the path
        self.username= user
        
    
class Job(object): 
    '''
    Creation:
        Job(jobInfo) 
            jobInfo: Class JobInfo from Colossus.core.job
    '''
    __metaclass__ = abc.ABCMeta
    
    outputFileLists = []        # The list containing the output files generated by the job
    outputDirList = []             # The list containing the output dirs generated by the job
     
    def __init__(self, jobInfo=None):
        self.jobInfo = jobInfo
        self.outputFileLists=[]
        self.outputDirList = [] 
        
    
    def getListOutputFiles(self):
        return self.outputFileLists
    
    def setListOutputFiles(self,listOutputFiles):
        self.outputFileLists = listOutputFiles
        
    def addOutputFile(self, outputFile):
        self.outputFileLists.append(outputFile)
        
    def getListOutputDirs(self):
        return self.outputDirList
    
    def setListOutputDirs(self,listOutputDirs):
        self.outputDirList = listOutputDirs
        
    def addOutputDir(self, outputDir):
        self.outputDirList.append(outputDir)
        
    def setJobInfo(self,jobInfo):
        self.jobInfo = jobInfo
        
    def getIdJob(self):
        return self.jobInfo.idJob
    
    def getUrl(self):
        return self.jobInfo.url
    
    def getPort(self):
        return self.jobInfo.port
    
    def getSourceFile(self):
        return self.jobInfo.sourceFile
    
    def getPath(self):
        return self.jobInfo.path
    
    def getParameter(self):
        return self.jobInfo.parameter
    
    def setUserName(self, name):
        self.jobInfo.username = name;
    
    def getUserName(self):
        return self.jobInfo.username;
    
    def getPathNameSourceFile(self):
        return urlparse(self.getSourceFile()).path
    
    def getNameExtSourceFile(self):
        return os.path.splitext(os.path.split(self.getSourceFile())[-1]) 
    
    def submit(self):
        self.prepareSubmission()
        self.status =  self.executeJob()
        self.informFinalization()
    
    def prepareSubmission(self):
        return
    
    def informFinalization(self):
        return 
        
    @abc.abstractmethod
    def execute(self):
        """Abstract method to be implemented in one of the subclases
        Must return 0 if everything was OK. 1 if error. Must be a synchronous call in the current version
        """
        return